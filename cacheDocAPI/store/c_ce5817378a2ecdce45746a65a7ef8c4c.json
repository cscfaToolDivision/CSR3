{
    "name": "CSDT\\CSR3\\Traits\\CSR3PropertyDTOTrait",
    "line": 31,
    "short_desc": "CSR3PropertyDTOTrait.php",
    "long_desc": "The CSR3PropertyDTOTrait allow to use custom DTO with properties as attribute",
    "hint": null,
    "tags": {
        "category": [
            [
                "Trait"
            ]
        ],
        "package": [
            [
                "CSR3-DataTransferObject"
            ]
        ],
        "author": [
            [
                "matthieu",
                "vallance",
                "<matthieu.vallance@cscfa.fr>"
            ]
        ],
        "license": [
            [
                "MIT",
                "<https:\/\/opensource.org\/licenses\/MIT>"
            ]
        ],
        "link": [
            [
                "http:\/\/cscfa.fr"
            ]
        ]
    },
    "namespace": "CSDT\\CSR3\\Traits",
    "file": "\/home\/workspace\/ToolDivision\/CSR3\/src\/CSDT\/CSR3\/Traits\/CSR3PropertyDTOTrait.php",
    "relative_file": null,
    "hash": "fcc33dbd99f7ee5402a68d7ae9a047fb606b13e5",
    "parent": null,
    "modifiers": null,
    "is_trait": true,
    "is_interface": false,
    "aliases": {
        "CSR3DTOInterface": "CSDT\\CSR3\\Interfaces\\CSR3DTOInterface"
    },
    "errors": [],
    "interfaces": [],
    "traits": [],
    "properties": {
        "attributeContainer": {
            "name": "attributeContainer",
            "line": 40,
            "short_desc": "Attribute container",
            "long_desc": "This property store the attribute container property name",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": {
                "nodeType": "Scalar_String",
                "value": "attributes",
                "attributes": {
                    "startLine": 40,
                    "endLine": 40,
                    "kind": 1
                }
            },
            "errors": []
        },
        "positionContainer": {
            "name": "positionContainer",
            "line": 49,
            "short_desc": "Position container",
            "long_desc": "This property store the position container property name",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": {
                "nodeType": "Scalar_String",
                "value": "traversingPosition",
                "attributes": {
                    "startLine": 49,
                    "endLine": 49,
                    "kind": 1
                }
            },
            "errors": []
        }
    },
    "methods": {
        "setAttribute": {
            "name": "setAttribute",
            "line": 61,
            "short_desc": "Set attribute",
            "long_desc": "This method allow to set or add an attribute to the DTO",
            "hint": [
                [
                    "CSDT\\CSR3\\Traits\\$this",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "attributeName": {
                    "name": "attributeName",
                    "line": 62,
                    "short_desc": "The attribute to set",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "string",
                    "default": null,
                    "is_by_ref": false
                },
                "attributeValue": {
                    "name": "attributeValue",
                    "line": 63,
                    "short_desc": "The value to set",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "getAttribute": {
            "name": "getAttribute",
            "line": 84,
            "short_desc": "Get attribute",
            "long_desc": "This method allow to retreive a value from a named attribute of the DTO",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "attributeName": {
                    "name": "attributeName",
                    "line": 84,
                    "short_desc": "The name of the attribute whence return the value",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "string",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "setAttributes": {
            "name": "setAttributes",
            "line": 106,
            "short_desc": "Set attributes",
            "long_desc": "This method allow to set the attributes of the DTO from an associative array",
            "hint": [
                [
                    "CSDT\\CSR3\\Traits\\$this",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "attributes": {
                    "name": "attributes",
                    "line": 106,
                    "short_desc": "The associative array of attributes",
                    "long_desc": null,
                    "hint": [
                        [
                            "array",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "array",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "getAttributes": {
            "name": "getAttributes",
            "line": 122,
            "short_desc": "Get attributes",
            "long_desc": "This method return the attributes as array from the DTO",
            "hint": [
                [
                    "array",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "offsetExists": {
            "name": "offsetExists",
            "line": 142,
            "short_desc": "Offset exist",
            "long_desc": "This method validate the existence of an offset",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "offset": {
                    "name": "offset",
                    "line": 142,
                    "short_desc": "The offset to validate",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "offsetGet": {
            "name": "offsetGet",
            "line": 160,
            "short_desc": "Offset get",
            "long_desc": "This method return an offset value",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "offset": {
                    "name": "offset",
                    "line": 160,
                    "short_desc": "The offset whence retreive the value",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "offsetSet": {
            "name": "offsetSet",
            "line": 175,
            "short_desc": "Offset set",
            "long_desc": "This method allow to set a value at an offset place",
            "hint": [
                [
                    "void",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "offset": {
                    "name": "offset",
                    "line": 175,
                    "short_desc": "The offset where set the value",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                },
                "value": {
                    "name": "value",
                    "line": 175,
                    "short_desc": "The value to inject",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "offsetUnset": {
            "name": "offsetUnset",
            "line": 189,
            "short_desc": "Offset unset",
            "long_desc": "This method remove an offset",
            "hint": [
                [
                    "void",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "offset": {
                    "name": "offset",
                    "line": 189,
                    "short_desc": "The offset to remove",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "current": {
            "name": "current",
            "line": 205,
            "short_desc": "Current",
            "long_desc": "This method return the current iterated value",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "next": {
            "name": "next",
            "line": 217,
            "short_desc": "Next",
            "long_desc": "This method advance the internal pointer by one step",
            "hint": [
                [
                    "void",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "key": {
            "name": "key",
            "line": 229,
            "short_desc": "Key",
            "long_desc": "This method return the current iterated key",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "valid": {
            "name": "valid",
            "line": 241,
            "short_desc": "Valid",
            "long_desc": "This method validate the current internal position existence",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "rewind": {
            "name": "rewind",
            "line": 255,
            "short_desc": "Rewind",
            "long_desc": "This method reinitialize the internal position",
            "hint": [
                [
                    "void",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "propertyExist": {
            "name": "propertyExist",
            "line": 271,
            "short_desc": "Property exist",
            "long_desc": "This method validate that a given property name is part of the current class.\nThis validation allow to the DTO to store a value direcly into an object\nproperty instead of the default storage array.",
            "hint": [
                [
                    "boolean",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "propertyName": {
                    "name": "propertyName",
                    "line": 271,
                    "short_desc": "The name of the property to check",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "string",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "getProperties": {
            "name": "getProperties",
            "line": 302,
            "short_desc": "Get properties",
            "long_desc": "This method return the existants properties of the current DTO object. It\nunset the attribute management properties to allow the only return  of\nstorage properties.\n\nBy overriding it you can specify any private properties that you want to use\ninside the final DTO object. This feature must be used with the override of\nthe setProperty() method and getProperty() method.\n\nexemple :\n<pre>\nprotected function getProperties()\n{\n     $privateArray = ['propA', 'propB'];\n\n     return array_merge(\n         parent::getProperties(),\n         $privateArray\n     );\n}\n<\/pre>",
            "hint": [
                [
                    "array",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "setProperty": {
            "name": "setProperty",
            "line": 344,
            "short_desc": "Set property",
            "long_desc": "This method inject a value into an existing class property. This offer to the\nDTO to store a value into object properties since current attribute\ncontainer.\n\nBy overriding this method you can store a value into a private class\nproperty. This feature must be used in addition with the override of\nthe getProperties() method and getProperty() method.\n\nexemple :\n<pre>\nprotected function setProperty(string $propertyName, $propertyValue)\n{\n     if (in_array($propertyName, ['privatePropA', 'privatePropB'])) {\n         $method = 'set'.ucfirst($propertyName);\n         $this->$method($propertyValue);\n         return $this;\n     }\n\n     return parent::setProperty($propertyName, $propertyValue);\n}\n<\/pre>",
            "hint": [
                [
                    "CSDT\\CSR3\\Traits\\$this",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "propertyName": {
                    "name": "propertyName",
                    "line": 344,
                    "short_desc": "The property name where inject the value",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "string",
                    "default": null,
                    "is_by_ref": false
                },
                "propertyValue": {
                    "name": "propertyValue",
                    "line": 344,
                    "short_desc": "The value to inject inside the property",
                    "long_desc": null,
                    "hint": [
                        [
                            "mixed",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "getProperty": {
            "name": "getProperty",
            "line": 378,
            "short_desc": "Get property",
            "long_desc": "This method return a value contained into any existing property of the\ncurrent DTO.\n\nBy overriding this method you can extract a value from a private class\nproperty. This feature must be used with the override of the getProperties()\nmethod and setProperty() method.\n\nexemple :\n<pre>\nprotected function getProperty(string $propertyName)\n{\n     if (in_array($propertyName, ['privatePropA', 'privatePropB'])) {\n         $method = 'get'.ucfirst($propertyName);\n         return $this->$method();\n     }\n\n     return parent::getProperty($propertyName);\n}\n<\/pre>",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "propertyName": {
                    "name": "propertyName",
                    "line": 378,
                    "short_desc": "The property whence extract the value",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "string",
                    "default": null,
                    "is_by_ref": false
                }
            }
        }
    },
    "constants": []
}